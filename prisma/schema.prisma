generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                String   @id @default(cuid())
  businessName      String
  name              String
  businessType      String
  website           String
  phone             String
  address           String
  coordinates       Json
  images            Json[]
  country           String
  email             String
  description       String
  jobDescription    String
  logo              Json
  businessStart     String
  NumberOfEmployees Int
  faceBook          String
  instagram         String
  youtube           String
  whatsAppNumber    String
  reviews           Review[]
  createdAt         DateTime @default(now())
  approved          Boolean  @default(false)
}

model Review {
  id         String    @id @default(cuid())
  star       Int       @default(0)
  review     String
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId String?
  userName   String
  createdAt  DateTime  @default(now())
}

model Post {
  id           String   @id @default(cuid())
  title        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  image        Json
  description  String
  slug         String   @unique
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String
  topNews      Boolean  @default(false)
  block        Block?
  userName     String
  mostRead     Boolean  @default(false)
  important    Boolean  @default(false)
  isPublished  Boolean  @default(false)

  @@map("posts")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@map("categories")
}

model Block {
  id      Int    @id @default(autoincrement())
  time    Int
  version String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  blocks  Json
}

enum Role {
  ADMINISTRATOR
  EDITOR
  AUTHOR
  SUBSCRIBER
  USER
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
